CREATE SCHEMA IF NOT EXISTS EmployeeManagement;  -- Create schema if it doesn't exist

USE EmployeeManagement;  -- Use the newly created schema

-- Create Employee table
CREATE TABLE Employee (
  employeeId VARCHAR(10) PRIMARY KEY,
  email VARCHAR(50) NOT NULL,
  name VARCHAR(50) NOT NULL,
  salary DECIMAL(10,2) NOT NULL,
  role VARCHAR(50) NOT NULL
);

-- Create Project table
CREATE TABLE Project (
  projectId VARCHAR(10) PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  description TEXT NOT NULL
);

-- Create Manager table (already has the correct foreign key constraint)
CREATE TABLE Manager (
  managerId VARCHAR(10) PRIMARY KEY,
  employeeId VARCHAR(10) FOREIGN KEY REFERENCES Employee(employeeId)
);

-- Create Department table
CREATE TABLE Department (
  departmentId VARCHAR(10) PRIMARY KEY,
  name VARCHAR(50) NOT NULL,
  managerId VARCHAR(10) FOREIGN KEY REFERENCES Manager(managerId)
);

-- Create SkillSet table
CREATE TABLE SkillSet (
  skillId VARCHAR(10) PRIMARY KEY,
  skillName VARCHAR(50) NOT NULL
);

-- Create EmployeeSkill table (composite primary key)
CREATE TABLE EmployeeSkill (
  employeeId VARCHAR(10),
  skillId VARCHAR(10),
  PRIMARY KEY (employeeId, skillId),  -- Define composite primary key
  FOREIGN KEY (employeeId) REFERENCES Employee(employeeId),
  FOREIGN KEY (skillId) REFERENCES SkillSet(skillId)
);

-- Create Request table
CREATE TABLE Request (
  requestId VARCHAR(10) PRIMARY KEY,
  projectId VARCHAR(10) FOREIGN KEY REFERENCES Project(projectId),
  skillId VARCHAR(10) FOREIGN KEY REFERENCES SkillSet(skillId),
  status VARCHAR(20) NOT NULL
);

-- Create Assignment table
CREATE TABLE Assignment (
  assignmentId SERIAL PRIMARY KEY,
  requestId VARCHAR(10) NOT NULL,
  employeeId VARCHAR(10),
  projectId VARCHAR(10),
  status VARCHAR(20) NOT NULL,
  FOREIGN KEY (requestId) REFERENCES Request(requestId),
  FOREIGN KEY (employeeId) REFERENCES Employee(employeeId),
  FOREIGN KEY (projectId) REFERENCES Project(projectId)
);

